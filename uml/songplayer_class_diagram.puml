@startuml MySongPlayer项目类图

' 配置
skinparam classAttributeIconSize 0
skinparam backgroundColor white
skinparam defaultFontName Microsoft YaHei
skinparam defaultTextAlignment center

' 标题
title MySongPlayer项目类图

' 接口定义
interface ICurrentSongManager {
  +currentSong(): AudioInfo*
  +setCurrentSong(AudioInfo*)
  +switchToNextSong()
  +switchToPreviousSong()
  +switchToAudioByIndex(int)
  +handlePlaybackFinished()
}

interface IPlaylistOperations {
  +addAudio(QString, QString, QUrl, QUrl, QUrl)
  +removeAudio(int)
  +clearPlaylist()
  +playlistModel(): PlaylistModel*
  +getPlaylistAudioInfoList(): QList<QObject*>
}

interface IPlaylistPersistence {
  +saveCurrentPlaylist(QString): bool
  +loadPlaylist(QString): bool
  +getAllPlaylistNames(): QStringList
  +deletePlaylist(QString): bool
  +renamePlaylist(QString, QString): bool
  +currentPlaylistName(): QString
  +storageService(): PlaylistStorageService*
}

' 类定义
class PlayerController {
  -m_audioPlayer: AudioPlayer*
  -m_playlistModel: PlaylistModel*
  -m_audioImporter: AudioImporter*
  -m_currentSongManager: ICurrentSongManager*
  -m_playlistOperations: IPlaylistOperations*
  -m_playlistPersistence: IPlaylistPersistence*
  -m_lyricsService: LyricsService*
  -m_lyricsModel: LyricsModel*
  -m_playlistStorageService: PlaylistStorageService*
  +playing(): bool
  +duration(): qint64
  +position(): qint64
  +volume(): float
  +setVolume(float)
  +playPause()
  +setPosition(qint64)
  +switchToNextSong()
  +switchToPreviousSong()
  +importLocalAudio(QList<QUrl>)
}

class AudioPlayer {
  -m_mediaPlayer: QMediaPlayer
  -m_audioOutput: QAudioOutput*
  -m_playing: bool
  -m_volume: float
  -m_muted: bool
  +playing(): bool
  +duration(): qint64
  +position(): qint64
  +setVolume(float)
  +playPause()
  +stop()
  +setPosition(qint64)
  +setSource(QUrl)
}

class PlaylistCoordinator {
  -m_playlistModel: PlaylistModel*
  -m_storageService: PlaylistStorageService*
  -m_currentPlaylistName: QString
}

class PlaylistModel {
  -m_audioList: QList<AudioInfo*>
  -m_currentSong: AudioInfo*
  -m_playMode: PlayMode
  -m_shuffleIndices: QList<int>
  -m_currentShuffleIndex: int
  +addAudio(QString, QString, QUrl, QUrl, QUrl)
  +removeAudio(int)
  +clearPlaylist()
  +getAudioInfoAtIndex(int): AudioInfo*
  +isDuplicateAudio(QUrl): bool
}

class AudioInfo {
  -m_songIndex: int
  -m_title: QString
  -m_authorName: QString
  -m_imageSource: QUrl
  -m_videoSource: QUrl
  -m_audioSource: QUrl
}

enum PlayMode {
  Loop
  Shuffle
  RepeatOne
}

class AudioImporter {
  +importLocalAudio(QList<QUrl>)
  +addEnglishCoverArt(QString, QString): bool
  -extractCoverArt(QString): QUrl
}

class LyricsService {
  +parseLrcFile(QString): QList<LyricLine>
  +hasLyricsFile(QString): bool
  -findLrcFile(QString): QString
  -parseLrcContent(QString): QList<LyricLine>
  -parseTimestamp(QString): qint64
}

class LyricsModel {
  -m_lyrics: QList<LyricsService::LyricLine>
  -m_allLyrics: QStringList
  -m_currentLineIndex: int
  -m_currentLyric: QString
  -m_hasLyrics: bool
  -m_showLyrics: bool
  +setLyrics(QList<LyricsService::LyricLine>)
  +updateCurrentPosition(qint64)
  +clearLyrics()
  +toggleDisplayMode()
}

class PlaylistStorageService {
  -m_database: PlaylistDatabase*
  -m_lastError: QString
  -m_initialized: bool
  +savePlaylist(QString, QList<AudioInfo*>, PlayMode, int): bool
  +loadPlaylist(QString): PlaylistInfo
  +getAllPlaylistNames(): QStringList
  +deletePlaylist(QString): bool
  +renamePlaylist(QString, QString): bool
}

class PlaylistDatabase {
  -m_database: QSqlDatabase
  -m_databasePath: QString
  -m_lastError: QString
  +initializeDatabase(): bool
  +closeDatabase()
  +createTables(): bool
  +executeQuery(QString, QVariantList): QSqlQuery
  +executeNonQuery(QString, QVariantList): bool
  +beginTransaction(): bool
  +commitTransaction(): bool
  +rollbackTransaction(): bool
}

class AudioSearchModel {
  -m_audioList: QList<AudioInfo*>
  -m_networkManager: QNetworkAccessManager
  -m_reply: QNetworkReply*
  -m_isSearching: bool
  +searchSong(QString)
  +parseData()
}

class PlaylistSearchModel {
  -m_searchResults: QList<SearchResult>
  -m_isSearching: bool
  -m_currentSearchText: QString
  +searchInPlaylist(QString)
  +clearSearch()
  +performSearch(QVariantList, QString)
  -matchesSearchCriteria(AudioInfo*, QString): bool
  -removeDuplicateResults()
}

' 关系定义
PlayerController --> AudioPlayer : 使用
PlayerController --> ICurrentSongManager : 依赖
PlayerController --> IPlaylistOperations : 依赖
PlayerController --> IPlaylistPersistence : 依赖
PlayerController --> AudioImporter : 使用
PlayerController --> LyricsService : 使用
PlayerController --> LyricsModel : 使用
PlayerController --> AudioSearchModel : 使用
PlayerController --> PlaylistSearchModel : 使用

PlaylistCoordinator ..|> ICurrentSongManager : 实现
PlaylistCoordinator ..|> IPlaylistOperations : 实现
PlaylistCoordinator ..|> IPlaylistPersistence : 实现
PlaylistCoordinator --> PlaylistModel : 管理
PlaylistCoordinator --> PlaylistStorageService : 使用

PlaylistModel "1" *-- "0..*" AudioInfo : 包含
PlaylistModel --> PlayMode : 使用

AudioSearchModel --> AudioInfo : 使用
PlaylistSearchModel --> AudioInfo : 使用

LyricsService --> LyricsModel : 提供数据
AudioImporter --> AudioInfo : 创建

PlaylistStorageService --> PlaylistDatabase : 使用

' 图例说明
legend
  MySongPlayer 项目类图
  显示了主要类和接口之间的关系
  ==
  实线带箭头: 关联/依赖关系
  虚线带箭头: 接口实现
  带菱形实线: 组合关系
endlegend

@enduml 