@startuml MySongPlayer项目架构图

' 配置
skinparam componentStyle uml2
skinparam backgroundColor white
skinparam packageTitleAlignment center
skinparam defaultFontName Microsoft YaHei
skinparam defaultTextAlignment center

' 标题
title MySongPlayer项目架构图

' 包定义
package "控制层 (Controllers)" {
  [PlayerController] as PC
  [AudioPlayer] as AP
}

package "协调器 (Coordinators)" {
  [PlaylistCoordinator] as PLCO
}

package "接口 (Interfaces)" {
  interface "ICurrentSongManager" as ICSM
  interface "IPlaylistOperations" as IPO
  interface "IPlaylistPersistence" as IPP
}

package "模型 (Models)" as MODELS {
  [AudioInfo] as AI
  [PlaylistModel] as PLM
  [AudioSearchModel] as ASM
  [PlaylistSearchModel] as PSM
  [LyricsModel] as LM
}

package "服务 (Services)" as SERVICES {
  [AudioImporter] as AIM
  [LyricsService] as LS
  [PlaylistStorageService] as PSS
}

package "存储 (Storage)" {
  [PlaylistDatabase] as PDB
}

package "QML用户界面" {
  [Main.qml] as MQML
  [组件 (components)] as COMP
  [布局 (layouts)] as LAY
  [面板 (panels)] as PAN
}

' 控制层依赖关系
PC --> AP : 使用
PC --> ICSM : 依赖接口
PC --> IPO : 依赖接口
PC --> IPP : 依赖接口
PC --> ASM : 使用
PC --> PSM : 使用
PC --> AIM : 使用
PC --> LM : 使用
PC --> LS : 使用

' 接口实现关系
PLCO ..|> ICSM : 实现
PLCO ..|> IPO : 实现
PLCO ..|> IPP : 实现

' 协调器依赖关系
PLCO --> PLM : 管理
PLCO --> PSS : 使用

' 模型依赖关系
PLM --> AI : 包含
ASM --> AI : 创建/使用
PSM --> AI : 使用

' 服务依赖关系
PSS --> PDB : 使用
LS --> LM : 提供数据
AIM --> AI : 创建

' QML界面依赖关系
MQML --> LAY : 包含
MQML --> PAN : 包含
LAY --> COMP : 使用
PAN --> COMP : 使用

' QML与C++之间的交互
MQML -[#green]-> PC : QML调用C++
PAN -[#green]-> PC : QML调用C++

' 图例说明
legend
  SongPlayer1 使用 MVC + Coordinator 架构模式
  遵循依赖倒置和接口隔离原则
  ==
  绿色箭头: QML与C++交互
  蓝色箭头: 普通依赖关系
  虚线箭头: 接口实现关系
endlegend

' 架构说明注释
note right of PLCO
  PlaylistCoordinator实现了三个接口:
  - ICurrentSongManager: 当前歌曲管理
  - IPlaylistOperations: 播放列表操作
  - IPlaylistPersistence: 数据持久化
  遵循接口隔离原则
end note

note right of PC
  PlayerController作为外观模式实现,
  是QML与后端的统一交互桥梁
end note

note bottom of MODELS
  Models层采用QAbstractListModel为基类,
  实现Qt Model/View架构,支持QML数据绑定
end note

note bottom of SERVICES
  Services层提供数据处理、导入和持久化功能,
  实现核心业务逻辑
end note

@enduml